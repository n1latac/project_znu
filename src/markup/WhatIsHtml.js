import React from 'react';
import styles from './style.module.css';

function WhatIsHtml() {

  return (
    <section className={styles['html-main']}>

        <h2>Начало работы с HTML</h2>
        <p>В этой статье мы охватим азы HTML, необходимые для начала работы. Дадим определение «элементам», «атрибутам», «тегам» и прочим важным понятиям, о которых вы, возможно, слышали, а также об их роли в языке. Мы также покажем, как устроены HTML-элементы, типичная HTML-страница, и объясним другие важные аспекты языка. По ходу дела, чтобы вы не заскучали, мы поиграем с настоящей HTML-страницей!</p>
        <h2>Что такое HTML?</h2>
        <p>HTML (HyperText Markup Language - язык гипертекстовой разметки) не является языком программирования; это язык разметки, используемый для определения структуры веб-страниц, посещаемых пользователями. Они могут иметь сложную или простую структуру, всё зависит от замысла и желания веб-разработчика. HTML состоит из ряда элементов, которые вы используете для того, чтобы охватить, обернуть или разметить различные части содержимого, чтобы оно имело определённый вид или срабатывало определённым способом. Встроенные тэги могут преобразовать часть содержимого в гиперссылку, по которой можно перейти на другую веб-страницу, выделить курсивом слова и так далее. Например, рассмотрим следующую строку:</p>
        <div className={styles['blockStyle']}>
            Мой кот очень сердитый
        </div>
        <p>Если мы хотим, чтобы строка отобразилась в таком же виде, мы можем определить её, как "параграф", заключив её в теги элемента "параграф" ({`<p>`}), например:</p>
        <div className={styles['blockStyle']}>
            {`<p>`}Мой кот очень сердитый{`</p>`}
        </div>
        <div className={styles['notes']}>
        <span className={styles.fw700}>Примечание:</span> Метки в HTML нечувствительны к регистру, то есть они могут быть записаны в верхнем или нижнем регистре. Например, тег {`<title>`} может быть записан как {`<title>`}, {`<TITLE>,`} {`<Title>`}, {`<TiTlE>`}, и т.д., и он будет работать нормально. Лучшей практикой, однако, является запись всех тегов в нижнем регистре для обеспечения согласованности, удобочитаемости и других причин.
        </div>
        <h2>Структура HTML-элементов</h2>
        <p>Давайте рассмотрим элемент "параграф" чуть подробнее:</p>
        <img className={styles['first-elem']} src='/img/elem.png'></img>
        <p>Основными частями элемента являются:</p>
        <ul className={styles['whatIsHtml-list']}>
            <li>1. Открывающий тег: Он состоит из названия (обозначения) элемента (в нашем случае, p), помещённого внутри угловых скобок. Данный тег служит признаком начала элемента, с этого момента тег начинает влиять на следующее после него содержимое.</li>
            <li>2. Закрывающий тег: выглядит как и открывающий, но содержит слеш перед названием тега. Он служит признаком конца элемента. Пропуски закрывающих тегов — типичная ошибка новичков, которая может приводить к неопределённым результатам — в лучшем случае всё сработает правильно, в других страница может вовсе не прорисоваться или прорисоваться не как ожидалось.</li>
            <li>3. Содержимое: Как видно, в нашем случае содержимым является простой текст.</li>
            <li>4. Элемент: открывающий тег + закрывающий тег + содержимое = элемент.</li>
        </ul>
        <h3>Вложенные элементы</h3>
        <p>Вы также можете вкладывать элементы внутрь других элементов — это называется вложенностью. Если мы хотим подчеркнуть, что наш кот очень сердитый, мы можем заключить слово "очень" в элемент ${`<strong>`} , который означает, что это слово крайне важно в данном контексте:</p>
        <div className={styles['blockStyle']}>
            {`<p>Мой кот <strong>очень</strong>  сердитый.</p>`}
        </div>
        <p>Вы должны удостовериться, что элементы вложены должным образом: в следующем примере мы открываем p элемент первым, затем элемент strong, затем мы закрываем элемент strong первым, затем p. Следующее писать неправильно:</p>
        <div className={styles['falseBlockStyle']}>{`<p>Мой кот <strong>очень сердитый.</p></strong>`}</div>
        <p>Элементы должны открываться и закрываться правильно таким образом, чтобы явно находиться внутри или снаружи друг друга. Если они перекрываются так, как в примере выше, то ваш браузер попытается «додумать» за вас, что вы имели в виду, и вы получите непредсказуемый результат. Так что не делайте так!</p>
        <h3>Блочные и строчные элементы</h3>
        <p>Существует две важных категории элементов в HTML, которые вам стоит знать — элементы блочного уровня и строчные элементы.</p>
        <ul className={styles['whatIsHtml-list']}   >
            <li>Элементы блочного уровня формируют видимый блок на странице — они окажутся на новой строке после любого контента, который шёл до них, и любой контент после них также окажется на новой строке. Чаще всего элементами блочного уровня бывают структурные элементы страницы, представляющие собой, например, параграфы (абзацы), списки, меню навигации, футеры, или подвалы, и т. п. Элементы блочного уровня не вкладываются в строчные элементы, но иногда могут вкладываться в другие элементы блочного уровня.</li>
            <li>{`Строчные элементы — это те, которые содержатся в элементах блочного уровня и окружают только малые части содержимого документа, не целые абзацы и группировки контента. Строчные элементы не приводят к появлению новой строки в документе: они обычно встречаются внутри абзаца текста, например, элемент <a> (ссылка) или акцентирующие элементы вроде <em> или <strong>.`}</li>
        </ul>
        <p>Посмотрите на следующий пример:</p>
        <div className={styles['blockStyle']}>
            {`<em>Первый</em><em>второй</em><em>третий</em>`}<br/>
            {`<p>четвёртый</p><p>пятый</p><p>шестой</p>`}
        </div>
        <p>
        {`<em> — это строчный элемент, так что, как вы здесь видите, первые три элемента находятся на одной строке друг с другом без пробелов между ними. С другой стороны, <p> — это элемент блочного уровня, так что каждый элемент находится на новой строке, с пространством выше и ниже каждого (этот интервал определяется CSS-оформлением по умолчанию, которое браузеры применяют к абзацам).`}
        </p>
        <div className={styles['whatIsHtml-example']}>Первыйвторойтретий<br/><br/>
            четвёртый
            <br/>
            <br/>
            пятый
            <br/>
            <br/>
            шестой
            <br/>
        </div>
        <div className={styles['notes']}><span className={styles['fw700']}>Примечание:</span> Не путайте термины «блочный» и «строчный», используемые в этом разделе, с одноимёнными типами отображения в CSS. Хотя по умолчанию они коррелируют, смена типа отображения в CSS не меняет категорию элемента и не влияет на то, во что его можно вкладывать и что можно вкладывать в него. Эта довольно частая путаница — одна из причин, почему HTML5 отказался от этих терминов.</div>
        <h3>Пустые элементы</h3>
        <p>Не все элементы соответствуют вышеупомянутому шаблону: открывающий тег, контент, закрывающий тег. Некоторые элементы состоят из одного тега и обычно используются для вставки чего-либо в то место документа, где размещены. Например, элемент {`<img>`} вставляет картинку на страницу в том самом месте, где он расположен:</p>
        <div className={styles['blockStyle']}>{`<img src="https://raw.githubusercontent.com/mdn/beginner-html-site/gh-pages/images/firefox-icon.png">`}</div>
        <p>Это выведет на вашу страницу следующее:</p>
        <div className={styles['whatIsHtml-example']}>
            <img src='/img/firefox-icon.png'></img>
        </div>
        <div className={styles['notes']}><span className={styles['fw700']}>Примечание:</span> Пустые элементы иногда называют void-элементами.</div>
    </section>
  )
}

export default WhatIsHtml;